name: Deploy to Amazon ECS

on:
  push:
    branches: ["master"]

env:
  AWS_REGION: us-east-1 # set this to your preferred AWS region, e.g. us-west-1
  AUTHOR_NAME: ${{ github.actor }}
  CERTIFICATE_DOMAIN_NAME: "*.branson.solutions"
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: full-stack-repository # set this to your Amazon ECR repository name
  BACKEND_IMAGE_TAG: full-stack-backend
  FRONTEND_IMAGE_TAG: full-stack-frontend

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create or Update ECR Repository Stack
        run: |
          STACK_NAME=ECRRepository
          TEMPLATE_BODY=file://ecr_repository_and_network_resources.yaml
          TAGS="[{\"Key\": \"Author\", \"Value\": \"$AUTHOR_NAME\"}, {\"Key\": \"Project\", \"Value\": \"Boilerplate Full-Stack App\"}]"


          PARAMETERS='ParameterKey=RepositoryName,ParameterValue=full-stack-repository'

          if aws cloudformation describe-stacks --stack-name $STACK_NAME; then
            echo "Stack exists, updating..."
            aws cloudformation update-stack \
              --stack-name $STACK_NAME \
              --template-body $TEMPLATE_BODY \
              --tags "$TAGS" \
              --parameters $PARAMETERS
          else
            echo "Stack does not exist, creating..."
            aws cloudformation create-stack \
              --stack-name $STACK_NAME \
              --template-body $TEMPLATE_BODY \
              --tags "$TAGS" \
              --parameters $PARAMETERS
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push backend image to Amazon ECR
        id: build-backend-image
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd backend
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create ACM certificate
        id: create-acm-certificate
        run: |
          CERTIFICATE_ARN=$(aws acm request-certificate --domain-name "$CERTIFICATE_DOMAIN_NAME" --validation-method DNS --query 'CertificateArn' --output text)
          echo "certificate_arn=$CERTIFICATE_ARN" >> $GITHUB_OUTPUT

      - name: Create or Update Back End Stack
        run: |
          STACK_NAME=ECSClusterBackEnd
          TEMPLATE_BODY=file://backend/template.yaml
          TAGS="[{\"Key\": \"Author\", \"Value\": \"${{ env.AUTHOR_NAME }}\"}, {\"Key\": \"Project\", \"Value\": \"Boilerplate Full-Stack App\"}]"
          PARAMETERS="ParameterKey=DockerImage,ParameterValue={{ steps.build-backend-image.outputs.image }} ParameterKey=CertificateImport,ParameterValue={{ steps.create-acm-certificate.outputs.certificate_arn }}"

          if aws cloudformation describe-stacks --stack-name $STACK_NAME; then
            echo "Stack exists, updating..."
            aws cloudformation update-stack \
              --stack-name $STACK_NAME \
              --template-body $TEMPLATE_BODY \
              --tags $TAGS \
              --parameters $PARAMETERS
          else
            echo "Stack does not exist, creating..."
            aws cloudformation create-stack \
              --stack-name $STACK_NAME \
              --template-body $TEMPLATE_BODY \
              --tags $TAGS \
              --parameters $PARAMETERS
          fi

      - name: Build, tag, and push frontend image to Amazon ECR
        id: build-frontend-image
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd frontend
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$FRONTEND_IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$FRONTEND_IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$FRONTEND_IMAGE_TAG" >> $GITHUB_OUTPUT
