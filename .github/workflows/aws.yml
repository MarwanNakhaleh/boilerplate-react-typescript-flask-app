name: Deploy to Amazon ECS

on:
  push:
    branches: ["master"]

env:
  AWS_REGION: us-east-1 # set this to your preferred AWS region, e.g. us-west-1
  AUTHOR_NAME: ${{ github.actor }}
  CERTIFICATE_DOMAIN_NAME: "*.branson.solutions"
  DNS_NAME: "branson.solutions"
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: full-stack-repository # set this to your Amazon ECR repository name
  BACKEND_IMAGE_TAG: full-stack-backend
  FRONTEND_IMAGE_TAG: full-stack-frontend

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node.js for Frontend Tests
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Frontend Dependencies and Run Tests
        run: |
          corepack enable
          cd frontend
          yarn install
          yarn test --watchAll=false

      # Add this step after the 'Install Frontend Dependencies and Run Tests' step
      - name: Set up Python for API Tests
        uses: actions/setup-python@v4
        with:
          python-version: "3.8" # Specify your Python version here

      - name: Install API Dependencies and Run Tests
        run: |
          python -m venv backend/venv
          source backend/venv/bin/activate
          pip install -r backend/requirements.txt
          python backend/test/test_api.py

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Route53 HostedZone ID
        id: get-hostedzone-id
        run: |
          DNS_NAME=$DNS_NAME
          HOSTED_ZONE_JSON=$(aws route53 list-hosted-zones-by-name --output json)
          HOSTED_ZONE_ID=$(echo $HOSTED_ZONE_JSON | jq --arg name "branson.solutions." -r '.HostedZones | .[] | select(.Name=="\($name)") | .Id' | sed 's|/hostedzone/||')
          echo "HostedZone ID: $HOSTED_ZONE_ID"
          echo "hosted_zone_id=$HOSTED_ZONE_ID" >> $GITHUB_OUTPUT

      - name: Create or Update ECR Repository Stack
        run: |
          STACK_NAME=ECRRepository
          TEMPLATE_BODY=file://ecr_repository_and_network_resources.yaml
          TAGS="[{\"Key\": \"Author\", \"Value\": \"$AUTHOR_NAME\"}, {\"Key\": \"Project\", \"Value\": \"Boilerplate Full-Stack App\"}]"

          PARAMETERS='ParameterKey=RepositoryName,ParameterValue=full-stack-repository'

          if aws cloudformation describe-stacks --stack-name $STACK_NAME; then
            echo "Stack exists, updating..."
            set +e  # Disable exit on error
            UPDATE_OUTPUT=$(aws cloudformation update-stack \
              --stack-name $STACK_NAME \
              --template-body $TEMPLATE_BODY \
              --tags "$TAGS" \
              --parameters $PARAMETERS 2>&1)
            STATUS=$?
            set -e  # Re-enable exit on error

            if [ $STATUS -ne 0 ]; then
              if [[ "$UPDATE_OUTPUT" == *"ValidationError"* && "$UPDATE_OUTPUT" == *"No updates are to be performed."* ]]; then
                echo "No updates are to be performed. Continuing..."
              else
                exit $STATUS
              fi
            else
              echo "Update initiated, waiting for completion..."
              aws cloudformation wait stack-update-complete --stack-name $STACK_NAME
            fi
          else
            echo "Stack does not exist, creating..."
            aws cloudformation create-stack \
              --stack-name $STACK_NAME \
              --template-body $TEMPLATE_BODY \
              --tags "$TAGS" \
              --parameters $PARAMETERS
            aws cloudformation wait stack-create-complete --stack-name $STACK_NAME
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Build, tag, and push backend image to Amazon ECR
        id: build-backend-image
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd backend
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$BACKEND_IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create or Find ACM certificate
        id: create-acm-certificate
        run: |
          CERTIFICATE_DOMAIN_NAME="$CERTIFICATE_DOMAIN_NAME"
          CERTIFICATES=$(aws acm list-certificates --query "CertificateSummaryList[?DomainName=='$CERTIFICATE_DOMAIN_NAME'].CertificateArn" --output text)

          for CERTIFICATE_ARN in $CERTIFICATES; do
            CERTIFICATE_DETAILS=$(aws acm describe-certificate --certificate-arn $CERTIFICATE_ARN --query 'Certificate')
            CERTIFICATE_STATUS=$(echo $CERTIFICATE_DETAILS | jq -r '.Status')
            if [ "$CERTIFICATE_STATUS" == "ISSUED" ]; then
              echo "Valid certificate found: $CERTIFICATE_ARN"
              echo "certificate_arn=$CERTIFICATE_ARN" >> $GITHUB_OUTPUT
              exit 0
            fi
          done

          echo "No valid certificate found. Requesting new certificate."
          CERTIFICATE_ARN=$(aws acm request-certificate --domain-name "$CERTIFICATE_DOMAIN_NAME" --validation-method DNS --query 'CertificateArn' --output text)
          echo "certificate_arn=$CERTIFICATE_ARN" >> $GITHUB_OUTPUT

      - name: Create or Update Back End Stack
        run: |
          STACK_NAME=ECSClusterBackEnd
          TEMPLATE_BODY=file://backend/template.yaml
          TAGS="[{\"Key\": \"Author\", \"Value\": \"$AUTHOR_NAME\"}, {\"Key\": \"Project\", \"Value\": \"Boilerplate Full-Stack App\"}]"
          PARAMETERS="ParameterKey=DockerImage,ParameterValue=${{ steps.build-backend-image.outputs.image }} ParameterKey=CertificateImport,ParameterValue=${{ steps.create-acm-certificate.outputs.certificate_arn }} ParameterKey=HostedZoneId,ParameterValue=${{ steps.get-hostedzone-id.outputs.hosted_zone_id }} ParameterKey=DomainName,ParameterValue=$DNS_NAME"

          if aws cloudformation describe-stacks --stack-name $STACK_NAME; then
            echo "Stack exists, updating..."
            set +e  # Disable exit on error
            UPDATE_OUTPUT=$(aws cloudformation update-stack \
              --stack-name $STACK_NAME \
              --template-body $TEMPLATE_BODY \
              --tags "$TAGS" \
              --parameters $PARAMETERS \
              --capabilities CAPABILITY_NAMED_IAM 2>&1)
            STATUS=$?
            set -e  # Re-enable exit on error

            if [ $STATUS -ne 0 ]; then
              if [[ "$UPDATE_OUTPUT" == *"ValidationError"* && "$UPDATE_OUTPUT" == *"No updates are to be performed."* ]]; then
                echo "No updates are to be performed. Continuing..."
              else
                exit $STATUS
              fi
            else
              echo "Update initiated, waiting for completion..."
              aws cloudformation wait stack-update-complete --stack-name $STACK_NAME
            fi
          else
            echo "Stack does not exist, creating..."
            aws cloudformation create-stack \
              --stack-name $STACK_NAME \
              --template-body $TEMPLATE_BODY \
              --tags "$TAGS" \
              --parameters $PARAMETERS \
              --capabilities CAPABILITY_NAMED_IAM
            aws cloudformation wait stack-create-complete --stack-name $STACK_NAME
          fi

      - name: Build, tag, and push frontend image to Amazon ECR
        id: build-frontend-image
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd frontend
          docker build --no-cache --platform linux/amd64 \
            --build-arg API_URL=${{ vars.API_URL }} \
            --build-arg REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$FRONTEND_IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$FRONTEND_IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$FRONTEND_IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create or Update Front End Stack
        run: |
          STACK_NAME=ECSClusterFrontEnd
          TEMPLATE_BODY=file://frontend/template.yaml
          TAGS="[{\"Key\": \"Author\", \"Value\": \"$AUTHOR_NAME\"}, {\"Key\": \"Project\", \"Value\": \"Boilerplate Full-Stack App\"}]"
          PARAMETERS="ParameterKey=DockerImage,ParameterValue=${{ steps.build-frontend-image.outputs.image }} ParameterKey=CertificateImport,ParameterValue=${{ steps.create-acm-certificate.outputs.certificate_arn }} ParameterKey=HostedZoneId,ParameterValue=${{ steps.get-hostedzone-id.outputs.hosted_zone_id }} ParameterKey=DomainName,ParameterValue=$DNS_NAME"

          if aws cloudformation describe-stacks --stack-name $STACK_NAME; then
            echo "Stack exists, updating..."
            set +e  # Disable exit on error
            UPDATE_OUTPUT=$(aws cloudformation update-stack \
              --stack-name $STACK_NAME \
              --template-body $TEMPLATE_BODY \
              --tags "$TAGS" \
              --parameters $PARAMETERS \
              --capabilities CAPABILITY_NAMED_IAM 2>&1)
            STATUS=$?
            set -e  # Re-enable exit on error

            if [ $STATUS -ne 0 ]; then
              if [[ "$UPDATE_OUTPUT" == *"ValidationError"* && "$UPDATE_OUTPUT" == *"No updates are to be performed."* ]]; then
                echo "No updates are to be performed. Continuing..."
              else
                exit $STATUS
              fi
            else
              echo "Update initiated, waiting for completion..."
              aws cloudformation wait stack-update-complete --stack-name $STACK_NAME
            fi
          else
            echo "Stack does not exist, creating..."
            aws cloudformation create-stack \
              --stack-name $STACK_NAME \
              --template-body $TEMPLATE_BODY \
              --tags "$TAGS" \
              --parameters $PARAMETERS \
              --capabilities CAPABILITY_NAMED_IAM
            aws cloudformation wait stack-create-complete --stack-name $STACK_NAME
          fi
