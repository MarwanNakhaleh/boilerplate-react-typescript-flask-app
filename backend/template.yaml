AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation template to deploy a Python Flask app to an ECS Cluster
Parameters:
  Region:
    Type: String
    Default: us-east-1
  ClusterName:
    Type: String
    Default: FlaskAppCluster
  ApiDeployStageName:
    Type: String
    Default: live
  DockerImage:
    Type: String
  CertificateImport:
    Type: String
  HostedZoneId:
    Type: String
  DomainName:
    Type: String
Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  # Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ECSTaskExecutionRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: "*"

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !ImportValue FullStackPublicSubnetId
          SecurityGroups:
            - !ImportValue FullStackSecurityGroupId
      LoadBalancers:
        - ContainerName: flask-app
          ContainerPort: 8000
          TargetGroupArn: !Ref TargetGroup

  # Log group to log container output to Cloudwatch
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/fullstack/backend/server
      RetentionInDays: 60

  # Log group to log API Gateway output to Cloudwatch
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/fullstack/backend/apigateway
      RetentionInDays: 60

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: FlaskAppLoadBalancer
      Subnets:
        - !ImportValue FullStackPublicSubnetId
        - !ImportValue FullStackPublicSubnet2Id
      SecurityGroups:
        - !ImportValue FullStackSecurityGroupId

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8000
      Protocol: HTTP
      VpcId: !ImportValue FullStackVpcId
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 300
      HealthCheckPath: /
      HealthCheckPort: 8000
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateImport

  # Task Definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      Family: flask-app
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: flask-app
          Image: !Ref DockerImage
          PortMappings:
            - ContainerPort: 8000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/fullstack/backend
              awslogs-region: !Ref Region
              awslogs-stream-prefix: ecs

  # keeping HTTPS API behind API Gateway
  VpcLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      Name: BackendApiVpcLink
      SecurityGroupIds:
        - !ImportValue FullStackSecurityGroupId
      SubnetIds:
        - !ImportValue FullStackPublicSubnetId
        - !ImportValue FullStackPublicSubnet2Id

  # API Gateway
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ECS API access
      Description: API Gateway to reach the ECS cluster running the API
      ProtocolType: HTTP
      # Target: arn:aws:apigateway:{region}:lambda:path/2015-03-31/functions/arn:aws:lambda:{region}:{account-id}:function:{function-name}/invocations

  ListenerApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      Description: Integration with ALB
      IntegrationType: HTTP_PROXY
      IntegrationUri: !GetAtt Listener.ListenerArn
      IntegrationMethod: ANY
      TimeoutInMillis: 15000
      ConnectionType: VPC_LINK
      ConnectionId: !Ref VpcLink
      PayloadFormatVersion: 1.0

  ApiListingsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: $default
      AuthorizationType: NONE # need an authorizer on this
      Target: !Join
        - /
        - - integrations
          - !Ref ListenerApiIntegration

  LiveStage:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      StageName: !Ref ApiDeployStageName
      Description: Live Stage
      AutoDeploy: true
      ApiId: !Ref HttpApi
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
        # LoggingLevel: INFO
        DataTraceEnabled: false
        ThrottlingBurstLimit: 10
        ThrottlingRateLimit: 10
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: >-
          {"requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "caller":"$context.identity.caller", "errorMessage":"$context.error.messageString","error":"$context.error.message",
          "user":"$context.identity.user","requestTime":"$context.requestTime","routeKey":"$context.routeKey",
          "status":"$context.status"}

  ApiDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - LiveStage
      - ApiListingsRoute
    Properties:
      Description: deployment of courses endpoints
      ApiId: !Ref HttpApi
      StageName: !Ref ApiDeployStageName

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub boilerplate-api.${DomainName}
      Type: "A"
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: "Z35SXDOTRQ7X7K" # comes from https://docs.aws.amazon.com/general/latest/gr/elb.html for us-east-1
        EvaluateTargetHealth: false

Outputs:
  LoadBalancerUrl:
    Description: URL for the load balancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: LoadBalancerUrl
